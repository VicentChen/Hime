#include "Shape.h"

namespace Falcor
{   
    Vao::SharedPtr createVao(const Vao::Topology topology, const Buffer::SharedPtr& pVertexBuffer, const Buffer::SharedPtr& pIndexBuffer, const ResourceFormat indexBufferFormat)
    {
        VertexLayout::SharedPtr pVertexLayout = VertexLayout::create();
        VertexBufferLayout::SharedPtr pBufferLayout = VertexBufferLayout::create();
        pBufferLayout->addElement("POSITION", 0, ResourceFormat::RGB32Float, 1, 0);
        pVertexLayout->addBufferLayout(0, pBufferLayout);
        Vao::BufferVec buffers{ pVertexBuffer };

        return Vao::create(topology, pVertexLayout, buffers, pIndexBuffer, indexBufferFormat);
    }

    void Shape::getInstance(uint& instanceCount, std::vector<float4x4>& instanceMatrixes, Buffer::SharedPtr& pInstanceBuffer)
    {
        instanceCount = (int)mTransformMatrixes.size();
        instanceMatrixes = mTransformMatrixes;

        Buffer::SharedPtr pBuffer;
        HimeBufferHelpers::createAndCopyBuffer(pBuffer, sizeof(float4x4), (uint)instanceMatrixes.size(), instanceMatrixes.data(), "ShapeInstanceBuffer");
        pInstanceBuffer = pBuffer;
    }

    /****************************** Lines ******************************/

    Vao::SharedPtr Lines::getVao()
    {
        assert(!mPoints.empty());
        if (mpVertexBuffer == nullptr)
        {
            HimeBufferHelpers::createAndCopyBuffer(mpVertexBuffer, sizeof(float3), (uint)mPoints.size(), mPoints.data(), "LinesVertexBuffer");
            mpVao = createVao(Vao::Topology::LineList, mpVertexBuffer, nullptr, ResourceFormat::Unknown);
        }
        return mpVao;
    }

    void Lines::getInstance(uint& instanceCount, std::vector<float4x4>& instanceMatrixes, Buffer::SharedPtr& pInstanceBuffer)
    {
        if (mTransformMatrixes.empty())
        {
            mTransformMatrixes.emplace_back(float4x4(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ));
        }

        Shape::getInstance(instanceCount, instanceMatrixes, pInstanceBuffer);
    }
    
    void Lines::addInstance(const float3& p1, const float3& p2)
    {
        mPoints.emplace_back(p1);
        mPoints.emplace_back(p2);
    }

    /****************************** Cubes ******************************/

    // Cube vertices.
    //        Y             
    //        |             
    //        3--------2      float3(-0.5, -0.5, -0.5), // 0
    //       /|       /|      float3( 0.5, -0.5, -0.5), // 1
    //      / |      / |      float3( 0.5,  0.5, -0.5), // 2
    //     7--|-----6  |      float3(-0.5,  0.5, -0.5), // 3
    //     |  0-----|--1--X   float3(-0.5, -0.5,  0.5), // 4
    //     | /      | /       float3( 0.5, -0.5,  0.5), // 5
    //     |/       |/        float3( 0.5,  0.5,  0.5), // 6
    //     4--------5         float3(-0.5,  0.5,  0.5), // 7
    //    /                   
    //   Z
    static const std::vector<float3> kCubeVertices({
        float3(-0.5, -0.5, -0.5), // 0
        float3( 0.5, -0.5, -0.5), // 1
        float3( 0.5,  0.5, -0.5), // 2
        float3(-0.5,  0.5, -0.5), // 3
        float3(-0.5, -0.5,  0.5), // 4
        float3( 0.5, -0.5,  0.5), // 5
        float3( 0.5,  0.5,  0.5), // 6
        float3(-0.5,  0.5,  0.5), // 7
    });

    // Cube indices.
    static const std::vector<int> kCubeIndices({
        0, 3, 2, /**/ 2, 1, 0, /**/ 4, 5, 6, /**/ 4, 6, 7,
        4, 0, 1, /**/ 4, 1, 5, /**/ 6, 3, 7, /**/ 2, 3, 6,
        4, 7, 0, /**/ 0, 7, 3, /**/ 1, 6, 5, /**/ 1, 2, 6,
    });

    ShapeData Cubes::mData = {};

    int Cubes::getVertexCount() const
    {
        return (int)kCubeVertices.size();
    }

    int Cubes::getIndexCount() const
    {
        return (int)kCubeIndices.size();
    }

    Vao::SharedPtr Cubes::getVao()
    {
        if (mData.vertexBuffer == nullptr)
        {
            HimeBufferHelpers::createAndCopyBuffer(mData.vertexBuffer, sizeof(float3), (uint)kCubeVertices.size(), kCubeVertices.data(), "CubeVertexBuffer");
            HimeBufferHelpers::createAndCopyBuffer(mData.indexBuffer, sizeof(int), (uint)kCubeIndices.size(), kCubeIndices.data(), "CubeIndexBuffer");
            mData.vao = createVao(Vao::Topology::TriangleList, mData.vertexBuffer, mData.indexBuffer, ResourceFormat::R32Uint);
        }
        return mData.vao;
    }

    void Cubes::addInstance(const float3& minPoint, const float3& maxPoint)
    {
        const float3 scale = maxPoint - minPoint;
        const float3 translate = (maxPoint + minPoint) * 0.5f;
        
        float4x4 transform = glm::scale(glm::translate(glm::mat4(), translate), scale);
        mTransformMatrixes.emplace_back(transform);
    }

    void Cubes::addInstance(const float3& scale, const float3& rotation, const float3& translate)
    {
        throw new std::runtime_error("Not implemented yet.");
    }

    /****************************** Wired Cubes ******************************/

    // Wired cube indices (Same as cube).
    static const std::vector<float3>& kWiredCubeVertices = kCubeVertices;

    // Cube indices (This avoids diagonal lines).
    static const std::vector<int> kWiredCubeIndices({
        0, 1, /**/ 1, 2, /**/ 2, 3, /**/ 3, 0,
        4, 5, /**/ 5, 6, /**/ 6, 7, /**/ 7, 4,
        0, 4, /**/ 1, 5, /**/ 2, 6, /**/ 3, 7,
    });

    ShapeData WiredCubes::mData = {};

    int WiredCubes::getIndexCount() const
    {
        return (int)kWiredCubeIndices.size();
    }

    Vao::SharedPtr WiredCubes::getVao()
    {
        if (mData.vertexBuffer == nullptr)
        {
            HimeBufferHelpers::createAndCopyBuffer(mData.vertexBuffer, sizeof(float3), (uint)kWiredCubeVertices.size(), kWiredCubeVertices.data(), "WiredCubeVertexBuffer");
            HimeBufferHelpers::createAndCopyBuffer(mData.indexBuffer, sizeof(int), (uint)kWiredCubeIndices.size(), kWiredCubeIndices.data(), "WiredCubeIndexBuffer");
            mData.vao = createVao(Vao::Topology::LineList, mData.vertexBuffer, mData.indexBuffer, ResourceFormat::R32Uint);
        }
        return mData.vao;
    }

    /****************************** Spheres ******************************/

    // Icosphere vertices with subdivision = 2;
    static const std::vector<float3> kSphereVertices({
        float3(0, 0, 1), float3(-0.160622, -0.221077, 0.961938), float3(0.160622, -0.221077, 0.961938), float3(-0.160622, -0.221077, 0.961938), float3(-0.309017, -0.425325, 0.850651), float3(0, -0.447214, 0.894427), float3(-0.160622, -0.221077, 0.961938), float3(0, -0.447214, 0.894427), float3(0.160622, -0.221077, 0.961938), float3(0.160622, -0.221077, 0.961938),
        float3(0, -0.447214, 0.894427), float3(0.309017, -0.425325, 0.850651), float3(-0.309017, -0.425325, 0.850651), float3(-0.433888, -0.597196, 0.674609), float3(-0.16246, -0.67082, 0.723607), float3(-0.433888, -0.597196, 0.674609), float3(-0.525731, -0.723607, 0.447214), float3(-0.273266, -0.818274, 0.505721), float3(-0.433888, -0.597196, 0.674609), float3(-0.273266, -0.818274, 0.505721),
        float3(-0.16246, -0.67082, 0.723607), float3(-0.16246, -0.67082, 0.723607), float3(-0.273266, -0.818274, 0.505721), float3(0, -0.850651, 0.525731), float3(-0.309017, -0.425325, 0.850651), float3(-0.16246, -0.67082, 0.723607), float3(0, -0.447214, 0.894427), float3(-0.16246, -0.67082, 0.723607), float3(0, -0.850651, 0.525731), float3(0.16246, -0.67082, 0.723607),
        float3(-0.16246, -0.67082, 0.723607), float3(0.16246, -0.67082, 0.723607), float3(0, -0.447214, 0.894427), float3(0, -0.447214, 0.894427), float3(0.16246, -0.67082, 0.723607), float3(0.309017, -0.425325, 0.850651), float3(0.309017, -0.425325, 0.850651), float3(0.16246, -0.67082, 0.723607), float3(0.433889, -0.597196, 0.674609), float3(0.16246, -0.67082, 0.723607),
        float3(0, -0.850651, 0.525731), float3(0.273267, -0.818274, 0.505721), float3(0.16246, -0.67082, 0.723607), float3(0.273267, -0.818274, 0.505721), float3(0.433889, -0.597196, 0.674609), float3(0.433889, -0.597196, 0.674609), float3(0.273267, -0.818274, 0.505721), float3(0.525731, -0.723607, 0.447214), float3(-0.525731, -0.723607, 0.447214), float3(-0.433888, -0.870463, 0.232454),
        float3(-0.273266, -0.818274, 0.505721), float3(-0.433888, -0.870463, 0.232454), float3(-0.309017, -0.951057, 0), float3(-0.16246, -0.947214, 0.276393), float3(-0.433888, -0.870463, 0.232454), float3(-0.16246, -0.947214, 0.276393), float3(-0.273266, -0.818274, 0.505721), float3(-0.273266, -0.818274, 0.505721), float3(-0.16246, -0.947214, 0.276393), float3(0, -0.850651, 0.525731),
        float3(-0.309017, -0.951057, 0), float3(-0.160622, -0.959253, -0.232454), float3(0, -1, 0), float3(-0.160622, -0.959253, -0.232454), float3(0, -0.894427, -0.447214), float3(0.160622, -0.959253, -0.232454), float3(-0.160622, -0.959253, -0.232454), float3(0.160622, -0.959253, -0.232454), float3(0, -1, 0), float3(0, -1, 0),
        float3(0.160622, -0.959253, -0.232454), float3(0.309017, -0.951057, 0), float3(-0.309017, -0.951057, 0), float3(0, -1, 0), float3(-0.16246, -0.947214, 0.276393), float3(0, -1, 0), float3(0.309017, -0.951057, 0), float3(0.16246, -0.947214, 0.276393), float3(0, -1, 0), float3(0.16246, -0.947214, 0.276393),
        float3(-0.16246, -0.947214, 0.276393), float3(-0.16246, -0.947214, 0.276393), float3(0.16246, -0.947214, 0.276393), float3(0, -0.850651, 0.525731), float3(0, -0.850651, 0.525731), float3(0.16246, -0.947214, 0.276393), float3(0.273267, -0.818274, 0.505721), float3(0.16246, -0.947214, 0.276393), float3(0.309017, -0.951057, 0), float3(0.433889, -0.870463, 0.232454),
        float3(0.16246, -0.947214, 0.276393), float3(0.433889, -0.870463, 0.232454), float3(0.273267, -0.818274, 0.505721), float3(0.273267, -0.818274, 0.505721), float3(0.433889, -0.870463, 0.232454), float3(0.525731, -0.723607, 0.447214), float3(0.525731, -0.723607, 0.447214), float3(0.433889, -0.870463, 0.232454), float3(0.69378, -0.68164, 0.232454), float3(0.433889, -0.870463, 0.232454),
        float3(0.309017, -0.951057, 0), float3(0.587785, -0.809017, 0), float3(0.433889, -0.870463, 0.232454), float3(0.587785, -0.809017, 0), float3(0.69378, -0.68164, 0.232454), float3(0.69378, -0.68164, 0.232454), float3(0.587785, -0.809017, 0), float3(0.809017, -0.587785, 0), float3(0.309017, -0.951057, 0), float3(0.160622, -0.959253, -0.232454),
        float3(0.425325, -0.861803, -0.276393), float3(0.160622, -0.959253, -0.232454), float3(0, -0.894427, -0.447214), float3(0.259892, -0.822619, -0.505721), float3(0.160622, -0.959253, -0.232454), float3(0.259892, -0.822619, -0.505721), float3(0.425325, -0.861803, -0.276393), float3(0.425325, -0.861803, -0.276393), float3(0.259892, -0.822619, -0.505721), float3(0.5, -0.688191, -0.525731),
        float3(0.309017, -0.951057, 0), float3(0.425325, -0.861803, -0.276393), float3(0.587785, -0.809017, 0), float3(0.425325, -0.861803, -0.276393), float3(0.5, -0.688191, -0.525731), float3(0.688191, -0.67082, -0.276393), float3(0.425325, -0.861803, -0.276393), float3(0.688191, -0.67082, -0.276393), float3(0.587785, -0.809017, 0), float3(0.587785, -0.809017, 0),
        float3(0.688191, -0.67082, -0.276393), float3(0.809017, -0.587785, 0), float3(0.809017, -0.587785, 0), float3(0.688191, -0.67082, -0.276393), float3(0.862668, -0.449186, -0.232454), float3(0.688191, -0.67082, -0.276393), float3(0.5, -0.688191, -0.525731), float3(0.702046, -0.501375, -0.505721), float3(0.688191, -0.67082, -0.276393), float3(0.702046, -0.501375, -0.505721),
        float3(0.862668, -0.449186, -0.232454), float3(0.862668, -0.449186, -0.232454), float3(0.702046, -0.501375, -0.505721), float3(0.850651, -0.276393, -0.447214), float3(0, -0.894427, -0.447214), float3(0, -0.738175, -0.674609), float3(0.259892, -0.822619, -0.505721), float3(0, -0.738175, -0.674609), float3(0, -0.525731, -0.850651), float3(0.262866, -0.638197, -0.723607),
        float3(0, -0.738175, -0.674609), float3(0.262866, -0.638197, -0.723607), float3(0.259892, -0.822619, -0.505721), float3(0.259892, -0.822619, -0.505721), float3(0.262866, -0.638197, -0.723607), float3(0.5, -0.688191, -0.525731), float3(0, -0.525731, -0.850651), float3(0, -0.273266, -0.961938), float3(0.262866, -0.361803, -0.894427), float3(0, -0.273266, -0.961938),
        float3(0, 0, -1), float3(0.259892, -0.084444, -0.961938), float3(0, -0.273266, -0.961938), float3(0.259892, -0.084444, -0.961938), float3(0.262866, -0.361803, -0.894427), float3(0.262866, -0.361803, -0.894427), float3(0.259892, -0.084444, -0.961938), float3(0.5, -0.16246, -0.850651), float3(0, -0.525731, -0.850651), float3(0.262866, -0.361803, -0.894427),
        float3(0.262866, -0.638197, -0.723607), float3(0.262866, -0.361803, -0.894427), float3(0.5, -0.16246, -0.850651), float3(0.525731, -0.447214, -0.723607), float3(0.262866, -0.361803, -0.894427), float3(0.525731, -0.447214, -0.723607), float3(0.262866, -0.638197, -0.723607), float3(0.262866, -0.638197, -0.723607), float3(0.525731, -0.447214, -0.723607), float3(0.5, -0.688191, -0.525731),
        float3(0.5, -0.688191, -0.525731), float3(0.525731, -0.447214, -0.723607), float3(0.702046, -0.501375, -0.505721), float3(0.525731, -0.447214, -0.723607), float3(0.5, -0.16246, -0.850651), float3(0.702046, -0.228109, -0.674609), float3(0.525731, -0.447214, -0.723607), float3(0.702046, -0.228109, -0.674609), float3(0.702046, -0.501375, -0.505721), float3(0.702046, -0.501375, -0.505721),
        float3(0.702046, -0.228109, -0.674609), float3(0.850651, -0.276393, -0.447214), float3(0, 0, 1), float3(0.160622, -0.221077, 0.961938), float3(0.259892, 0.084444, 0.961938), float3(0.160622, -0.221077, 0.961938), float3(0.309017, -0.425325, 0.850651), float3(0.425325, -0.138197, 0.894427), float3(0.160622, -0.221077, 0.961938), float3(0.425325, -0.138197, 0.894427),
        float3(0.259892, 0.084444, 0.961938), float3(0.259892, 0.084444, 0.961938), float3(0.425325, -0.138197, 0.894427), float3(0.5, 0.16246, 0.850651), float3(0.309017, -0.425325, 0.850651), float3(0.433889, -0.597196, 0.674609), float3(0.587785, -0.361803, 0.723607), float3(0.433889, -0.597196, 0.674609), float3(0.525731, -0.723607, 0.447214), float3(0.693781, -0.512752, 0.505721),
        float3(0.433889, -0.597196, 0.674609), float3(0.693781, -0.512752, 0.505721), float3(0.587785, -0.361803, 0.723607), float3(0.587785, -0.361803, 0.723607), float3(0.693781, -0.512752, 0.505721), float3(0.809017, -0.262865, 0.525731), float3(0.309017, -0.425325, 0.850651), float3(0.587785, -0.361803, 0.723607), float3(0.425325, -0.138197, 0.894427), float3(0.587785, -0.361803, 0.723607),
        float3(0.809017, -0.262865, 0.525731), float3(0.688191, -0.0527863, 0.723607), float3(0.587785, -0.361803, 0.723607), float3(0.688191, -0.0527863, 0.723607), float3(0.425325, -0.138197, 0.894427), float3(0.425325, -0.138197, 0.894427), float3(0.688191, -0.0527863, 0.723607), float3(0.5, 0.16246, 0.850651), float3(0.5, 0.16246, 0.850651), float3(0.688191, -0.0527863, 0.723607),
        float3(0.702046, 0.228109, 0.674609), float3(0.688191, -0.0527863, 0.723607), float3(0.809017, -0.262865, 0.525731), float3(0.862668, 0.00703155, 0.505721), float3(0.688191, -0.0527863, 0.723607), float3(0.862668, 0.00703155, 0.505721), float3(0.702046, 0.228109, 0.674609), float3(0.702046, 0.228109, 0.674609), float3(0.862668, 0.00703155, 0.505721), float3(0.850651, 0.276393, 0.447214),
        float3(0.525731, -0.723607, 0.447214), float3(0.69378, -0.68164, 0.232454), float3(0.693781, -0.512752, 0.505721), float3(0.69378, -0.68164, 0.232454), float3(0.809017, -0.587785, 0), float3(0.850651, -0.447214, 0.276393), float3(0.69378, -0.68164, 0.232454), float3(0.850651, -0.447214, 0.276393), float3(0.693781, -0.512752, 0.505721), float3(0.693781, -0.512752, 0.505721),
        float3(0.850651, -0.447214, 0.276393), float3(0.809017, -0.262865, 0.525731), float3(0.809017, -0.587785, 0), float3(0.862668, -0.449186, -0.232454), float3(0.951057, -0.309017, 0), float3(0.862668, -0.449186, -0.232454), float3(0.850651, -0.276393, -0.447214), float3(0.961938, -0.143665, -0.232454), float3(0.862668, -0.449186, -0.232454), float3(0.961938, -0.143665, -0.232454),
        float3(0.951057, -0.309017, 0), float3(0.951057, -0.309017, 0), float3(0.961938, -0.143665, -0.232454), float3(1, 0, 0), float3(0.809017, -0.587785, 0), float3(0.951057, -0.309017, 0), float3(0.850651, -0.447214, 0.276393), float3(0.951057, -0.309017, 0), float3(1, 0, 0), float3(0.951057, -0.138197, 0.276393),
        float3(0.951057, -0.309017, 0), float3(0.951057, -0.138197, 0.276393), float3(0.850651, -0.447214, 0.276393), float3(0.850651, -0.447214, 0.276393), float3(0.951057, -0.138197, 0.276393), float3(0.809017, -0.262865, 0.525731), float3(0.809017, -0.262865, 0.525731), float3(0.951057, -0.138197, 0.276393), float3(0.862668, 0.00703155, 0.505721), float3(0.951057, -0.138197, 0.276393),
        float3(1, 0, 0), float3(0.961938, 0.143665, 0.232454), float3(0.951057, -0.138197, 0.276393), float3(0.961938, 0.143665, 0.232454), float3(0.862668, 0.00703155, 0.505721), float3(0.862668, 0.00703155, 0.505721), float3(0.961938, 0.143665, 0.232454), float3(0.850651, 0.276393, 0.447214), float3(0.850651, 0.276393, 0.447214), float3(0.961938, 0.143665, 0.232454),
        float3(0.862668, 0.449186, 0.232454), float3(0.961938, 0.143665, 0.232454), float3(1, 0, 0), float3(0.951057, 0.309017, 0), float3(0.961938, 0.143665, 0.232454), float3(0.951057, 0.309017, 0), float3(0.862668, 0.449186, 0.232454), float3(0.862668, 0.449186, 0.232454), float3(0.951057, 0.309017, 0), float3(0.809017, 0.587785, 0),
        float3(1, 0, 0), float3(0.961938, -0.143665, -0.232454), float3(0.951057, 0.138197, -0.276393), float3(0.961938, -0.143665, -0.232454), float3(0.850651, -0.276393, -0.447214), float3(0.862668, -0.00703144, -0.505721), float3(0.961938, -0.143665, -0.232454), float3(0.862668, -0.00703144, -0.505721), float3(0.951057, 0.138197, -0.276393), float3(0.951057, 0.138197, -0.276393),
        float3(0.862668, -0.00703144, -0.505721), float3(0.809017, 0.262866, -0.525731), float3(1, 0, 0), float3(0.951057, 0.138197, -0.276393), float3(0.951057, 0.309017, 0), float3(0.951057, 0.138197, -0.276393), float3(0.809017, 0.262866, -0.525731), float3(0.850651, 0.447214, -0.276393), float3(0.951057, 0.138197, -0.276393), float3(0.850651, 0.447214, -0.276393),
        float3(0.951057, 0.309017, 0), float3(0.951057, 0.309017, 0), float3(0.850651, 0.447214, -0.276393), float3(0.809017, 0.587785, 0), float3(0.809017, 0.587785, 0), float3(0.850651, 0.447214, -0.276393), float3(0.69378, 0.68164, -0.232454), float3(0.850651, 0.447214, -0.276393), float3(0.809017, 0.262866, -0.525731), float3(0.69378, 0.512752, -0.505721),
        float3(0.850651, 0.447214, -0.276393), float3(0.69378, 0.512752, -0.505721), float3(0.69378, 0.68164, -0.232454), float3(0.69378, 0.68164, -0.232454), float3(0.69378, 0.512752, -0.505721), float3(0.525731, 0.723607, -0.447214), float3(0.850651, -0.276393, -0.447214), float3(0.702046, -0.228109, -0.674609), float3(0.862668, -0.00703144, -0.505721), float3(0.702046, -0.228109, -0.674609),
        float3(0.5, -0.16246, -0.850651), float3(0.688191, 0.0527864, -0.723607), float3(0.702046, -0.228109, -0.674609), float3(0.688191, 0.0527864, -0.723607), float3(0.862668, -0.00703144, -0.505721), float3(0.862668, -0.00703144, -0.505721), float3(0.688191, 0.0527864, -0.723607), float3(0.809017, 0.262866, -0.525731), float3(0.5, -0.16246, -0.850651), float3(0.259892, -0.084444, -0.961938),
        float3(0.425325, 0.138197, -0.894427), float3(0.259892, -0.084444, -0.961938), float3(0, 0, -1), float3(0.160622, 0.221077, -0.961938), float3(0.259892, -0.084444, -0.961938), float3(0.160622, 0.221077, -0.961938), float3(0.425325, 0.138197, -0.894427), float3(0.425325, 0.138197, -0.894427), float3(0.160622, 0.221077, -0.961938), float3(0.309017, 0.425325, -0.850651),
        float3(0.5, -0.16246, -0.850651), float3(0.425325, 0.138197, -0.894427), float3(0.688191, 0.0527864, -0.723607), float3(0.425325, 0.138197, -0.894427), float3(0.309017, 0.425325, -0.850651), float3(0.587785, 0.361803, -0.723607), float3(0.425325, 0.138197, -0.894427), float3(0.587785, 0.361803, -0.723607), float3(0.688191, 0.0527864, -0.723607), float3(0.688191, 0.0527864, -0.723607),
        float3(0.587785, 0.361803, -0.723607), float3(0.809017, 0.262866, -0.525731), float3(0.809017, 0.262866, -0.525731), float3(0.587785, 0.361803, -0.723607), float3(0.69378, 0.512752, -0.505721), float3(0.587785, 0.361803, -0.723607), float3(0.309017, 0.425325, -0.850651), float3(0.433888, 0.597196, -0.674609), float3(0.587785, 0.361803, -0.723607), float3(0.433888, 0.597196, -0.674609),
        float3(0.69378, 0.512752, -0.505721), float3(0.69378, 0.512752, -0.505721), float3(0.433888, 0.597196, -0.674609), float3(0.525731, 0.723607, -0.447214), float3(0, 0, 1), float3(0.259892, 0.084444, 0.961938), float3(0, 0.273266, 0.961938), float3(0.259892, 0.084444, 0.961938), float3(0.5, 0.16246, 0.850651), float3(0.262865, 0.361803, 0.894427),
        float3(0.259892, 0.084444, 0.961938), float3(0.262865, 0.361803, 0.894427), float3(0, 0.273266, 0.961938), float3(0, 0.273266, 0.961938), float3(0.262865, 0.361803, 0.894427), float3(0, 0.525731, 0.850651), float3(0.5, 0.16246, 0.850651), float3(0.702046, 0.228109, 0.674609), float3(0.525731, 0.447214, 0.723607), float3(0.702046, 0.228109, 0.674609),
        float3(0.850651, 0.276393, 0.447214), float3(0.702046, 0.501375, 0.505721), float3(0.702046, 0.228109, 0.674609), float3(0.702046, 0.501375, 0.505721), float3(0.525731, 0.447214, 0.723607), float3(0.525731, 0.447214, 0.723607), float3(0.702046, 0.501375, 0.505721), float3(0.5, 0.688191, 0.525731), float3(0.5, 0.16246, 0.850651), float3(0.525731, 0.447214, 0.723607),
        float3(0.262865, 0.361803, 0.894427), float3(0.525731, 0.447214, 0.723607), float3(0.5, 0.688191, 0.525731), float3(0.262865, 0.638197, 0.723607), float3(0.525731, 0.447214, 0.723607), float3(0.262865, 0.638197, 0.723607), float3(0.262865, 0.361803, 0.894427), float3(0.262865, 0.361803, 0.894427), float3(0.262865, 0.638197, 0.723607), float3(0, 0.525731, 0.850651),
        float3(0, 0.525731, 0.850651), float3(0.262865, 0.638197, 0.723607), float3(0, 0.738175, 0.674609), float3(0.262865, 0.638197, 0.723607), float3(0.5, 0.688191, 0.525731), float3(0.259892, 0.822619, 0.505721), float3(0.262865, 0.638197, 0.723607), float3(0.259892, 0.822619, 0.505721), float3(0, 0.738175, 0.674609), float3(0, 0.738175, 0.674609),
        float3(0.259892, 0.822619, 0.505721), float3(0, 0.894427, 0.447214), float3(0.850651, 0.276393, 0.447214), float3(0.862668, 0.449186, 0.232454), float3(0.702046, 0.501375, 0.505721), float3(0.862668, 0.449186, 0.232454), float3(0.809017, 0.587785, 0), float3(0.688191, 0.67082, 0.276393), float3(0.862668, 0.449186, 0.232454), float3(0.688191, 0.67082, 0.276393),
        float3(0.702046, 0.501375, 0.505721), float3(0.702046, 0.501375, 0.505721), float3(0.688191, 0.67082, 0.276393), float3(0.5, 0.688191, 0.525731), float3(0.809017, 0.587785, 0), float3(0.69378, 0.68164, -0.232454), float3(0.587785, 0.809017, 0), float3(0.69378, 0.68164, -0.232454), float3(0.525731, 0.723607, -0.447214), float3(0.433888, 0.870463, -0.232454),
        float3(0.69378, 0.68164, -0.232454), float3(0.433888, 0.870463, -0.232454), float3(0.587785, 0.809017, 0), float3(0.587785, 0.809017, 0), float3(0.433888, 0.870463, -0.232454), float3(0.309017, 0.951057, 0), float3(0.809017, 0.587785, 0), float3(0.587785, 0.809017, 0), float3(0.688191, 0.67082, 0.276393), float3(0.587785, 0.809017, 0),
        float3(0.309017, 0.951057, 0), float3(0.425325, 0.861803, 0.276393), float3(0.587785, 0.809017, 0), float3(0.425325, 0.861803, 0.276393), float3(0.688191, 0.67082, 0.276393), float3(0.688191, 0.67082, 0.276393), float3(0.425325, 0.861803, 0.276393), float3(0.5, 0.688191, 0.525731), float3(0.5, 0.688191, 0.525731), float3(0.425325, 0.861803, 0.276393),
        float3(0.259892, 0.822619, 0.505721), float3(0.425325, 0.861803, 0.276393), float3(0.309017, 0.951057, 0), float3(0.160622, 0.959253, 0.232454), float3(0.425325, 0.861803, 0.276393), float3(0.160622, 0.959253, 0.232454), float3(0.259892, 0.822619, 0.505721), float3(0.259892, 0.822619, 0.505721), float3(0.160622, 0.959253, 0.232454), float3(0, 0.894427, 0.447214),
        float3(0, 0.894427, 0.447214), float3(0.160622, 0.959253, 0.232454), float3(-0.160622, 0.959253, 0.232454), float3(0.160622, 0.959253, 0.232454), float3(0.309017, 0.951057, 0), float3(0, 1, 0), float3(0.160622, 0.959253, 0.232454), float3(0, 1, 0), float3(-0.160622, 0.959253, 0.232454), float3(-0.160622, 0.959253, 0.232454),
        float3(0, 1, 0), float3(-0.309017, 0.951057, 0), float3(0.309017, 0.951057, 0), float3(0.433888, 0.870463, -0.232454), float3(0.16246, 0.947214, -0.276393), float3(0.433888, 0.870463, -0.232454), float3(0.525731, 0.723607, -0.447214), float3(0.273267, 0.818274, -0.505721), float3(0.433888, 0.870463, -0.232454), float3(0.273267, 0.818274, -0.505721),
        float3(0.16246, 0.947214, -0.276393), float3(0.16246, 0.947214, -0.276393), float3(0.273267, 0.818274, -0.505721), float3(0, 0.850651, -0.525731), float3(0.309017, 0.951057, 0), float3(0.16246, 0.947214, -0.276393), float3(0, 1, 0), float3(0.16246, 0.947214, -0.276393), float3(0, 0.850651, -0.525731), float3(-0.16246, 0.947214, -0.276393),
        float3(0.16246, 0.947214, -0.276393), float3(-0.16246, 0.947214, -0.276393), float3(0, 1, 0), float3(0, 1, 0), float3(-0.16246, 0.947214, -0.276393), float3(-0.309017, 0.951057, 0), float3(-0.309017, 0.951057, 0), float3(-0.16246, 0.947214, -0.276393), float3(-0.433888, 0.870463, -0.232454), float3(-0.16246, 0.947214, -0.276393),
        float3(0, 0.850651, -0.525731), float3(-0.273266, 0.818274, -0.505721), float3(-0.16246, 0.947214, -0.276393), float3(-0.273266, 0.818274, -0.505721), float3(-0.433888, 0.870463, -0.232454), float3(-0.433888, 0.870463, -0.232454), float3(-0.273266, 0.818274, -0.505721), float3(-0.525731, 0.723607, -0.447214), float3(0.525731, 0.723607, -0.447214), float3(0.433888, 0.597196, -0.674609),
        float3(0.273267, 0.818274, -0.505721), float3(0.433888, 0.597196, -0.674609), float3(0.309017, 0.425325, -0.850651), float3(0.16246, 0.67082, -0.723607), float3(0.433888, 0.597196, -0.674609), float3(0.16246, 0.67082, -0.723607), float3(0.273267, 0.818274, -0.505721), float3(0.273267, 0.818274, -0.505721), float3(0.16246, 0.67082, -0.723607), float3(0, 0.850651, -0.525731),
        float3(0.309017, 0.425325, -0.850651), float3(0.160622, 0.221077, -0.961938), float3(0, 0.447214, -0.894427), float3(0.160622, 0.221077, -0.961938), float3(0, 0, -1), float3(-0.160622, 0.221077, -0.961938), float3(0.160622, 0.221077, -0.961938), float3(-0.160622, 0.221077, -0.961938), float3(0, 0.447214, -0.894427), float3(0, 0.447214, -0.894427),
        float3(-0.160622, 0.221077, -0.961938), float3(-0.309017, 0.425325, -0.850651), float3(0.309017, 0.425325, -0.850651), float3(0, 0.447214, -0.894427), float3(0.16246, 0.67082, -0.723607), float3(0, 0.447214, -0.894427), float3(-0.309017, 0.425325, -0.850651), float3(-0.16246, 0.67082, -0.723607), float3(0, 0.447214, -0.894427), float3(-0.16246, 0.67082, -0.723607),
        float3(0.16246, 0.67082, -0.723607), float3(0.16246, 0.67082, -0.723607), float3(-0.16246, 0.67082, -0.723607), float3(0, 0.850651, -0.525731), float3(0, 0.850651, -0.525731), float3(-0.16246, 0.67082, -0.723607), float3(-0.273266, 0.818274, -0.505721), float3(-0.16246, 0.67082, -0.723607), float3(-0.309017, 0.425325, -0.850651), float3(-0.433888, 0.597196, -0.674609),
        float3(-0.16246, 0.67082, -0.723607), float3(-0.433888, 0.597196, -0.674609), float3(-0.273266, 0.818274, -0.505721), float3(-0.273266, 0.818274, -0.505721), float3(-0.433888, 0.597196, -0.674609), float3(-0.525731, 0.723607, -0.447214), float3(0, 0, 1), float3(0, 0.273266, 0.961938), float3(-0.259892, 0.0844439, 0.961938), float3(0, 0.273266, 0.961938),
        float3(0, 0.525731, 0.850651), float3(-0.262866, 0.361803, 0.894427), float3(0, 0.273266, 0.961938), float3(-0.262866, 0.361803, 0.894427), float3(-0.259892, 0.0844439, 0.961938), float3(-0.259892, 0.0844439, 0.961938), float3(-0.262866, 0.361803, 0.894427), float3(-0.5, 0.16246, 0.850651), float3(0, 0.525731, 0.850651), float3(0, 0.738175, 0.674609),
        float3(-0.262866, 0.638197, 0.723607), float3(0, 0.738175, 0.674609), float3(0, 0.894427, 0.447214), float3(-0.259892, 0.822619, 0.505721), float3(0, 0.738175, 0.674609), float3(-0.259892, 0.822619, 0.505721), float3(-0.262866, 0.638197, 0.723607), float3(-0.262866, 0.638197, 0.723607), float3(-0.259892, 0.822619, 0.505721), float3(-0.5, 0.688191, 0.525731),
        float3(0, 0.525731, 0.850651), float3(-0.262866, 0.638197, 0.723607), float3(-0.262866, 0.361803, 0.894427), float3(-0.262866, 0.638197, 0.723607), float3(-0.5, 0.688191, 0.525731), float3(-0.525731, 0.447214, 0.723607), float3(-0.262866, 0.638197, 0.723607), float3(-0.525731, 0.447214, 0.723607), float3(-0.262866, 0.361803, 0.894427), float3(-0.262866, 0.361803, 0.894427),
        float3(-0.525731, 0.447214, 0.723607), float3(-0.5, 0.16246, 0.850651), float3(-0.5, 0.16246, 0.850651), float3(-0.525731, 0.447214, 0.723607), float3(-0.702046, 0.228109, 0.674609), float3(-0.525731, 0.447214, 0.723607), float3(-0.5, 0.688191, 0.525731), float3(-0.702047, 0.501375, 0.505721), float3(-0.525731, 0.447214, 0.723607), float3(-0.702047, 0.501375, 0.505721),
        float3(-0.702046, 0.228109, 0.674609), float3(-0.702046, 0.228109, 0.674609), float3(-0.702047, 0.501375, 0.505721), float3(-0.850651, 0.276393, 0.447214), float3(0, 0.894427, 0.447214), float3(-0.160622, 0.959253, 0.232454), float3(-0.259892, 0.822619, 0.505721), float3(-0.160622, 0.959253, 0.232454), float3(-0.309017, 0.951057, 0), float3(-0.425325, 0.861803, 0.276393),
        float3(-0.160622, 0.959253, 0.232454), float3(-0.425325, 0.861803, 0.276393), float3(-0.259892, 0.822619, 0.505721), float3(-0.259892, 0.822619, 0.505721), float3(-0.425325, 0.861803, 0.276393), float3(-0.5, 0.688191, 0.525731), float3(-0.309017, 0.951057, 0), float3(-0.433888, 0.870463, -0.232454), float3(-0.587785, 0.809017, 0), float3(-0.433888, 0.870463, -0.232454),
        float3(-0.525731, 0.723607, -0.447214), float3(-0.69378, 0.68164, -0.232454), float3(-0.433888, 0.870463, -0.232454), float3(-0.69378, 0.68164, -0.232454), float3(-0.587785, 0.809017, 0), float3(-0.587785, 0.809017, 0), float3(-0.69378, 0.68164, -0.232454), float3(-0.809017, 0.587785, 0), float3(-0.309017, 0.951057, 0), float3(-0.587785, 0.809017, 0),
        float3(-0.425325, 0.861803, 0.276393), float3(-0.587785, 0.809017, 0), float3(-0.809017, 0.587785, 0), float3(-0.688191, 0.67082, 0.276393), float3(-0.587785, 0.809017, 0), float3(-0.688191, 0.67082, 0.276393), float3(-0.425325, 0.861803, 0.276393), float3(-0.425325, 0.861803, 0.276393), float3(-0.688191, 0.67082, 0.276393), float3(-0.5, 0.688191, 0.525731),
        float3(-0.5, 0.688191, 0.525731), float3(-0.688191, 0.67082, 0.276393), float3(-0.702047, 0.501375, 0.505721), float3(-0.688191, 0.67082, 0.276393), float3(-0.809017, 0.587785, 0), float3(-0.862669, 0.449186, 0.232454), float3(-0.688191, 0.67082, 0.276393), float3(-0.862669, 0.449186, 0.232454), float3(-0.702047, 0.501375, 0.505721), float3(-0.702047, 0.501375, 0.505721),
        float3(-0.862669, 0.449186, 0.232454), float3(-0.850651, 0.276393, 0.447214), float3(-0.850651, 0.276393, 0.447214), float3(-0.862669, 0.449186, 0.232454), float3(-0.961938, 0.143665, 0.232454), float3(-0.862669, 0.449186, 0.232454), float3(-0.809017, 0.587785, 0), float3(-0.951056, 0.309017, 0), float3(-0.862669, 0.449186, 0.232454), float3(-0.951056, 0.309017, 0),
        float3(-0.961938, 0.143665, 0.232454), float3(-0.961938, 0.143665, 0.232454), float3(-0.951056, 0.309017, 0), float3(-1, 0, 0), float3(-0.809017, 0.587785, 0), float3(-0.69378, 0.68164, -0.232454), float3(-0.850651, 0.447214, -0.276393), float3(-0.69378, 0.68164, -0.232454), float3(-0.525731, 0.723607, -0.447214), float3(-0.69378, 0.512752, -0.505721),
        float3(-0.69378, 0.68164, -0.232454), float3(-0.69378, 0.512752, -0.505721), float3(-0.850651, 0.447214, -0.276393), float3(-0.850651, 0.447214, -0.276393), float3(-0.69378, 0.512752, -0.505721), float3(-0.809017, 0.262866, -0.525731), float3(-0.809017, 0.587785, 0), float3(-0.850651, 0.447214, -0.276393), float3(-0.951056, 0.309017, 0), float3(-0.850651, 0.447214, -0.276393),
        float3(-0.809017, 0.262866, -0.525731), float3(-0.951057, 0.138197, -0.276393), float3(-0.850651, 0.447214, -0.276393), float3(-0.951057, 0.138197, -0.276393), float3(-0.951056, 0.309017, 0), float3(-0.951056, 0.309017, 0), float3(-0.951057, 0.138197, -0.276393), float3(-1, 0, 0), float3(-1, 0, 0), float3(-0.951057, 0.138197, -0.276393),
        float3(-0.961938, -0.143665, -0.232454), float3(-0.951057, 0.138197, -0.276393), float3(-0.809017, 0.262866, -0.525731), float3(-0.862668, -0.00703143, -0.505721), float3(-0.951057, 0.138197, -0.276393), float3(-0.862668, -0.00703143, -0.505721), float3(-0.961938, -0.143665, -0.232454), float3(-0.961938, -0.143665, -0.232454), float3(-0.862668, -0.00703143, -0.505721), float3(-0.850651, -0.276393, -0.447214),
        float3(-0.525731, 0.723607, -0.447214), float3(-0.433888, 0.597196, -0.674609), float3(-0.69378, 0.512752, -0.505721), float3(-0.433888, 0.597196, -0.674609), float3(-0.309017, 0.425325, -0.850651), float3(-0.587785, 0.361803, -0.723607), float3(-0.433888, 0.597196, -0.674609), float3(-0.587785, 0.361803, -0.723607), float3(-0.69378, 0.512752, -0.505721), float3(-0.69378, 0.512752, -0.505721),
        float3(-0.587785, 0.361803, -0.723607), float3(-0.809017, 0.262866, -0.525731), float3(-0.309017, 0.425325, -0.850651), float3(-0.160622, 0.221077, -0.961938), float3(-0.425325, 0.138197, -0.894427), float3(-0.160622, 0.221077, -0.961938), float3(0, 0, -1), float3(-0.259892, -0.084444, -0.961938), float3(-0.160622, 0.221077, -0.961938), float3(-0.259892, -0.084444, -0.961938),
        float3(-0.425325, 0.138197, -0.894427), float3(-0.425325, 0.138197, -0.894427), float3(-0.259892, -0.084444, -0.961938), float3(-0.5, -0.16246, -0.850651), float3(-0.309017, 0.425325, -0.850651), float3(-0.425325, 0.138197, -0.894427), float3(-0.587785, 0.361803, -0.723607), float3(-0.425325, 0.138197, -0.894427), float3(-0.5, -0.16246, -0.850651), float3(-0.688191, 0.0527864, -0.723607),
        float3(-0.425325, 0.138197, -0.894427), float3(-0.688191, 0.0527864, -0.723607), float3(-0.587785, 0.361803, -0.723607), float3(-0.587785, 0.361803, -0.723607), float3(-0.688191, 0.0527864, -0.723607), float3(-0.809017, 0.262866, -0.525731), float3(-0.809017, 0.262866, -0.525731), float3(-0.688191, 0.0527864, -0.723607), float3(-0.862668, -0.00703143, -0.505721), float3(-0.688191, 0.0527864, -0.723607),
        float3(-0.5, -0.16246, -0.850651), float3(-0.702046, -0.228109, -0.674609), float3(-0.688191, 0.0527864, -0.723607), float3(-0.702046, -0.228109, -0.674609), float3(-0.862668, -0.00703143, -0.505721), float3(-0.862668, -0.00703143, -0.505721), float3(-0.702046, -0.228109, -0.674609), float3(-0.850651, -0.276393, -0.447214), float3(0, 0, 1), float3(-0.259892, 0.0844439, 0.961938),
        float3(-0.160622, -0.221077, 0.961938), float3(-0.259892, 0.0844439, 0.961938), float3(-0.5, 0.16246, 0.850651), float3(-0.425325, -0.138197, 0.894427), float3(-0.259892, 0.0844439, 0.961938), float3(-0.425325, -0.138197, 0.894427), float3(-0.160622, -0.221077, 0.961938), float3(-0.160622, -0.221077, 0.961938), float3(-0.425325, -0.138197, 0.894427), float3(-0.309017, -0.425325, 0.850651),
        float3(-0.5, 0.16246, 0.850651), float3(-0.702046, 0.228109, 0.674609), float3(-0.688191, -0.0527865, 0.723607), float3(-0.702046, 0.228109, 0.674609), float3(-0.850651, 0.276393, 0.447214), float3(-0.862668, 0.0070313, 0.505721), float3(-0.702046, 0.228109, 0.674609), float3(-0.862668, 0.0070313, 0.505721), float3(-0.688191, -0.0527865, 0.723607), float3(-0.688191, -0.0527865, 0.723607),
        float3(-0.862668, 0.0070313, 0.505721), float3(-0.809017, -0.262866, 0.525731), float3(-0.5, 0.16246, 0.850651), float3(-0.688191, -0.0527865, 0.723607), float3(-0.425325, -0.138197, 0.894427), float3(-0.688191, -0.0527865, 0.723607), float3(-0.809017, -0.262866, 0.525731), float3(-0.587785, -0.361803, 0.723607), float3(-0.688191, -0.0527865, 0.723607), float3(-0.587785, -0.361803, 0.723607),
        float3(-0.425325, -0.138197, 0.894427), float3(-0.425325, -0.138197, 0.894427), float3(-0.587785, -0.361803, 0.723607), float3(-0.309017, -0.425325, 0.850651), float3(-0.309017, -0.425325, 0.850651), float3(-0.587785, -0.361803, 0.723607), float3(-0.433888, -0.597196, 0.674609), float3(-0.587785, -0.361803, 0.723607), float3(-0.809017, -0.262866, 0.525731), float3(-0.69378, -0.512752, 0.505721),
        float3(-0.587785, -0.361803, 0.723607), float3(-0.69378, -0.512752, 0.505721), float3(-0.433888, -0.597196, 0.674609), float3(-0.433888, -0.597196, 0.674609), float3(-0.69378, -0.512752, 0.505721), float3(-0.525731, -0.723607, 0.447214), float3(-0.850651, 0.276393, 0.447214), float3(-0.961938, 0.143665, 0.232454), float3(-0.862668, 0.0070313, 0.505721), float3(-0.961938, 0.143665, 0.232454),
        float3(-1, 0, 0), float3(-0.951057, -0.138197, 0.276393), float3(-0.961938, 0.143665, 0.232454), float3(-0.951057, -0.138197, 0.276393), float3(-0.862668, 0.0070313, 0.505721), float3(-0.862668, 0.0070313, 0.505721), float3(-0.951057, -0.138197, 0.276393), float3(-0.809017, -0.262866, 0.525731), float3(-1, 0, 0), float3(-0.961938, -0.143665, -0.232454),
        float3(-0.951057, -0.309017, 0), float3(-0.961938, -0.143665, -0.232454), float3(-0.850651, -0.276393, -0.447214), float3(-0.862669, -0.449186, -0.232454), float3(-0.961938, -0.143665, -0.232454), float3(-0.862669, -0.449186, -0.232454), float3(-0.951057, -0.309017, 0), float3(-0.951057, -0.309017, 0), float3(-0.862669, -0.449186, -0.232454), float3(-0.809017, -0.587785, 0),
        float3(-1, 0, 0), float3(-0.951057, -0.309017, 0), float3(-0.951057, -0.138197, 0.276393), float3(-0.951057, -0.309017, 0), float3(-0.809017, -0.587785, 0), float3(-0.850651, -0.447214, 0.276393), float3(-0.951057, -0.309017, 0), float3(-0.850651, -0.447214, 0.276393), float3(-0.951057, -0.138197, 0.276393), float3(-0.951057, -0.138197, 0.276393),
        float3(-0.850651, -0.447214, 0.276393), float3(-0.809017, -0.262866, 0.525731), float3(-0.809017, -0.262866, 0.525731), float3(-0.850651, -0.447214, 0.276393), float3(-0.69378, -0.512752, 0.505721), float3(-0.850651, -0.447214, 0.276393), float3(-0.809017, -0.587785, 0), float3(-0.69378, -0.68164, 0.232454), float3(-0.850651, -0.447214, 0.276393), float3(-0.69378, -0.68164, 0.232454),
        float3(-0.69378, -0.512752, 0.505721), float3(-0.69378, -0.512752, 0.505721), float3(-0.69378, -0.68164, 0.232454), float3(-0.525731, -0.723607, 0.447214), float3(-0.525731, -0.723607, 0.447214), float3(-0.69378, -0.68164, 0.232454), float3(-0.433888, -0.870463, 0.232454), float3(-0.69378, -0.68164, 0.232454), float3(-0.809017, -0.587785, 0), float3(-0.587785, -0.809017, 0),
        float3(-0.69378, -0.68164, 0.232454), float3(-0.587785, -0.809017, 0), float3(-0.433888, -0.870463, 0.232454), float3(-0.433888, -0.870463, 0.232454), float3(-0.587785, -0.809017, 0), float3(-0.309017, -0.951057, 0), float3(-0.809017, -0.587785, 0), float3(-0.862669, -0.449186, -0.232454), float3(-0.688191, -0.67082, -0.276393), float3(-0.862669, -0.449186, -0.232454),
        float3(-0.850651, -0.276393, -0.447214), float3(-0.702046, -0.501375, -0.505721), float3(-0.862669, -0.449186, -0.232454), float3(-0.702046, -0.501375, -0.505721), float3(-0.688191, -0.67082, -0.276393), float3(-0.688191, -0.67082, -0.276393), float3(-0.702046, -0.501375, -0.505721), float3(-0.5, -0.688191, -0.525731), float3(-0.809017, -0.587785, 0), float3(-0.688191, -0.67082, -0.276393),
        float3(-0.587785, -0.809017, 0), float3(-0.688191, -0.67082, -0.276393), float3(-0.5, -0.688191, -0.525731), float3(-0.425325, -0.861803, -0.276393), float3(-0.688191, -0.67082, -0.276393), float3(-0.425325, -0.861803, -0.276393), float3(-0.587785, -0.809017, 0), float3(-0.587785, -0.809017, 0), float3(-0.425325, -0.861803, -0.276393), float3(-0.309017, -0.951057, 0),
        float3(-0.309017, -0.951057, 0), float3(-0.425325, -0.861803, -0.276393), float3(-0.160622, -0.959253, -0.232454), float3(-0.425325, -0.861803, -0.276393), float3(-0.5, -0.688191, -0.525731), float3(-0.259892, -0.822619, -0.505721), float3(-0.425325, -0.861803, -0.276393), float3(-0.259892, -0.822619, -0.505721), float3(-0.160622, -0.959253, -0.232454), float3(-0.160622, -0.959253, -0.232454),
        float3(-0.259892, -0.822619, -0.505721), float3(0, -0.894427, -0.447214), float3(-0.850651, -0.276393, -0.447214), float3(-0.702046, -0.228109, -0.674609), float3(-0.702046, -0.501375, -0.505721), float3(-0.702046, -0.228109, -0.674609), float3(-0.5, -0.16246, -0.850651), float3(-0.525731, -0.447214, -0.723607), float3(-0.702046, -0.228109, -0.674609), float3(-0.525731, -0.447214, -0.723607),
        float3(-0.702046, -0.501375, -0.505721), float3(-0.702046, -0.501375, -0.505721), float3(-0.525731, -0.447214, -0.723607), float3(-0.5, -0.688191, -0.525731), float3(-0.5, -0.16246, -0.850651), float3(-0.259892, -0.084444, -0.961938), float3(-0.262866, -0.361803, -0.894427), float3(-0.259892, -0.084444, -0.961938), float3(0, 0, -1), float3(0, -0.273266, -0.961938),
        float3(-0.259892, -0.084444, -0.961938), float3(0, -0.273266, -0.961938), float3(-0.262866, -0.361803, -0.894427), float3(-0.262866, -0.361803, -0.894427), float3(0, -0.273266, -0.961938), float3(0, -0.525731, -0.850651), float3(-0.5, -0.16246, -0.850651), float3(-0.262866, -0.361803, -0.894427), float3(-0.525731, -0.447214, -0.723607), float3(-0.262866, -0.361803, -0.894427),
        float3(0, -0.525731, -0.850651), float3(-0.262866, -0.638197, -0.723607), float3(-0.262866, -0.361803, -0.894427), float3(-0.262866, -0.638197, -0.723607), float3(-0.525731, -0.447214, -0.723607), float3(-0.525731, -0.447214, -0.723607), float3(-0.262866, -0.638197, -0.723607), float3(-0.5, -0.688191, -0.525731), float3(-0.5, -0.688191, -0.525731), float3(-0.262866, -0.638197, -0.723607),
        float3(-0.259892, -0.822619, -0.505721), float3(-0.262866, -0.638197, -0.723607), float3(0, -0.525731, -0.850651), float3(0, -0.738175, -0.674609), float3(-0.262866, -0.638197, -0.723607), float3(0, -0.738175, -0.674609), float3(-0.259892, -0.822619, -0.505721), float3(-0.259892, -0.822619, -0.505721), float3(0, -0.738175, -0.674609), float3(0, -0.894427, -0.447214),
    });

    // Sphere indices (Wired sphere and sphere use same indices).
    static const std::vector<int> kSphereIndices({
          0,   1,   2, /**/   3,   4,   5, /**/   6,   7,   8, /**/   9,  10,  11, /**/  12,  13,  14, /**/  15,  16,  17, /**/  18,  19,  20, /**/  21,  22,  23, /**/  24,  25,  26, /**/  27,  28,  29,
         30,  31,  32, /**/  33,  34,  35, /**/  36,  37,  38, /**/  39,  40,  41, /**/  42,  43,  44, /**/  45,  46,  47, /**/  48,  49,  50, /**/  51,  52,  53, /**/  54,  55,  56, /**/  57,  58,  59,
         60,  61,  62, /**/  63,  64,  65, /**/  66,  67,  68, /**/  69,  70,  71, /**/  72,  73,  74, /**/  75,  76,  77, /**/  78,  79,  80, /**/  81,  82,  83, /**/  84,  85,  86, /**/  87,  88,  89,
         90,  91,  92, /**/  93,  94,  95, /**/  96,  97,  98, /**/  99, 100, 101, /**/ 102, 103, 104, /**/ 105, 106, 107, /**/ 108, 109, 110, /**/ 111, 112, 113, /**/ 114, 115, 116, /**/ 117, 118, 119,
        120, 121, 122, /**/ 123, 124, 125, /**/ 126, 127, 128, /**/ 129, 130, 131, /**/ 132, 133, 134, /**/ 135, 136, 137, /**/ 138, 139, 140, /**/ 141, 142, 143, /**/ 144, 145, 146, /**/ 147, 148, 149,
        150, 151, 152, /**/ 153, 154, 155, /**/ 156, 157, 158, /**/ 159, 160, 161, /**/ 162, 163, 164, /**/ 165, 166, 167, /**/ 168, 169, 170, /**/ 171, 172, 173, /**/ 174, 175, 176, /**/ 177, 178, 179,
        180, 181, 182, /**/ 183, 184, 185, /**/ 186, 187, 188, /**/ 189, 190, 191, /**/ 192, 193, 194, /**/ 195, 196, 197, /**/ 198, 199, 200, /**/ 201, 202, 203, /**/ 204, 205, 206, /**/ 207, 208, 209,
        210, 211, 212, /**/ 213, 214, 215, /**/ 216, 217, 218, /**/ 219, 220, 221, /**/ 222, 223, 224, /**/ 225, 226, 227, /**/ 228, 229, 230, /**/ 231, 232, 233, /**/ 234, 235, 236, /**/ 237, 238, 239,
        240, 241, 242, /**/ 243, 244, 245, /**/ 246, 247, 248, /**/ 249, 250, 251, /**/ 252, 253, 254, /**/ 255, 256, 257, /**/ 258, 259, 260, /**/ 261, 262, 263, /**/ 264, 265, 266, /**/ 267, 268, 269,
        270, 271, 272, /**/ 273, 274, 275, /**/ 276, 277, 278, /**/ 279, 280, 281, /**/ 282, 283, 284, /**/ 285, 286, 287, /**/ 288, 289, 290, /**/ 291, 292, 293, /**/ 294, 295, 296, /**/ 297, 298, 299,
        300, 301, 302, /**/ 303, 304, 305, /**/ 306, 307, 308, /**/ 309, 310, 311, /**/ 312, 313, 314, /**/ 315, 316, 317, /**/ 318, 319, 320, /**/ 321, 322, 323, /**/ 324, 325, 326, /**/ 327, 328, 329,
        330, 331, 332, /**/ 333, 334, 335, /**/ 336, 337, 338, /**/ 339, 340, 341, /**/ 342, 343, 344, /**/ 345, 346, 347, /**/ 348, 349, 350, /**/ 351, 352, 353, /**/ 354, 355, 356, /**/ 357, 358, 359,
        360, 361, 362, /**/ 363, 364, 365, /**/ 366, 367, 368, /**/ 369, 370, 371, /**/ 372, 373, 374, /**/ 375, 376, 377, /**/ 378, 379, 380, /**/ 381, 382, 383, /**/ 384, 385, 386, /**/ 387, 388, 389,
        390, 391, 392, /**/ 393, 394, 395, /**/ 396, 397, 398, /**/ 399, 400, 401, /**/ 402, 403, 404, /**/ 405, 406, 407, /**/ 408, 409, 410, /**/ 411, 412, 413, /**/ 414, 415, 416, /**/ 417, 418, 419,
        420, 421, 422, /**/ 423, 424, 425, /**/ 426, 427, 428, /**/ 429, 430, 431, /**/ 432, 433, 434, /**/ 435, 436, 437, /**/ 438, 439, 440, /**/ 441, 442, 443, /**/ 444, 445, 446, /**/ 447, 448, 449,
        450, 451, 452, /**/ 453, 454, 455, /**/ 456, 457, 458, /**/ 459, 460, 461, /**/ 462, 463, 464, /**/ 465, 466, 467, /**/ 468, 469, 470, /**/ 471, 472, 473, /**/ 474, 475, 476, /**/ 477, 478, 479,
        480, 481, 482, /**/ 483, 484, 485, /**/ 486, 487, 488, /**/ 489, 490, 491, /**/ 492, 493, 494, /**/ 495, 496, 497, /**/ 498, 499, 500, /**/ 501, 502, 503, /**/ 504, 505, 506, /**/ 507, 508, 509,
        510, 511, 512, /**/ 513, 514, 515, /**/ 516, 517, 518, /**/ 519, 520, 521, /**/ 522, 523, 524, /**/ 525, 526, 527, /**/ 528, 529, 530, /**/ 531, 532, 533, /**/ 534, 535, 536, /**/ 537, 538, 539,
        540, 541, 542, /**/ 543, 544, 545, /**/ 546, 547, 548, /**/ 549, 550, 551, /**/ 552, 553, 554, /**/ 555, 556, 557, /**/ 558, 559, 560, /**/ 561, 562, 563, /**/ 564, 565, 566, /**/ 567, 568, 569,
        570, 571, 572, /**/ 573, 574, 575, /**/ 576, 577, 578, /**/ 579, 580, 581, /**/ 582, 583, 584, /**/ 585, 586, 587, /**/ 588, 589, 590, /**/ 591, 592, 593, /**/ 594, 595, 596, /**/ 597, 598, 599,
        600, 601, 602, /**/ 603, 604, 605, /**/ 606, 607, 608, /**/ 609, 610, 611, /**/ 612, 613, 614, /**/ 615, 616, 617, /**/ 618, 619, 620, /**/ 621, 622, 623, /**/ 624, 625, 626, /**/ 627, 628, 629,
        630, 631, 632, /**/ 633, 634, 635, /**/ 636, 637, 638, /**/ 639, 640, 641, /**/ 642, 643, 644, /**/ 645, 646, 647, /**/ 648, 649, 650, /**/ 651, 652, 653, /**/ 654, 655, 656, /**/ 657, 658, 659,
        660, 661, 662, /**/ 663, 664, 665, /**/ 666, 667, 668, /**/ 669, 670, 671, /**/ 672, 673, 674, /**/ 675, 676, 677, /**/ 678, 679, 680, /**/ 681, 682, 683, /**/ 684, 685, 686, /**/ 687, 688, 689,
        690, 691, 692, /**/ 693, 694, 695, /**/ 696, 697, 698, /**/ 699, 700, 701, /**/ 702, 703, 704, /**/ 705, 706, 707, /**/ 708, 709, 710, /**/ 711, 712, 713, /**/ 714, 715, 716, /**/ 717, 718, 719,
        720, 721, 722, /**/ 723, 724, 725, /**/ 726, 727, 728, /**/ 729, 730, 731, /**/ 732, 733, 734, /**/ 735, 736, 737, /**/ 738, 739, 740, /**/ 741, 742, 743, /**/ 744, 745, 746, /**/ 747, 748, 749,
        750, 751, 752, /**/ 753, 754, 755, /**/ 756, 757, 758, /**/ 759, 760, 761, /**/ 762, 763, 764, /**/ 765, 766, 767, /**/ 768, 769, 770, /**/ 771, 772, 773, /**/ 774, 775, 776, /**/ 777, 778, 779,
        780, 781, 782, /**/ 783, 784, 785, /**/ 786, 787, 788, /**/ 789, 790, 791, /**/ 792, 793, 794, /**/ 795, 796, 797, /**/ 798, 799, 800, /**/ 801, 802, 803, /**/ 804, 805, 806, /**/ 807, 808, 809,
        810, 811, 812, /**/ 813, 814, 815, /**/ 816, 817, 818, /**/ 819, 820, 821, /**/ 822, 823, 824, /**/ 825, 826, 827, /**/ 828, 829, 830, /**/ 831, 832, 833, /**/ 834, 835, 836, /**/ 837, 838, 839,
        840, 841, 842, /**/ 843, 844, 845, /**/ 846, 847, 848, /**/ 849, 850, 851, /**/ 852, 853, 854, /**/ 855, 856, 857, /**/ 858, 859, 860, /**/ 861, 862, 863, /**/ 864, 865, 866, /**/ 867, 868, 869,
        870, 871, 872, /**/ 873, 874, 875, /**/ 876, 877, 878, /**/ 879, 880, 881, /**/ 882, 883, 884, /**/ 885, 886, 887, /**/ 888, 889, 890, /**/ 891, 892, 893, /**/ 894, 895, 896, /**/ 897, 898, 899,
        900, 901, 902, /**/ 903, 904, 905, /**/ 906, 907, 908, /**/ 909, 910, 911, /**/ 912, 913, 914, /**/ 915, 916, 917, /**/ 918, 919, 920, /**/ 921, 922, 923, /**/ 924, 925, 926, /**/ 927, 928, 929,
        930, 931, 932, /**/ 933, 934, 935, /**/ 936, 937, 938, /**/ 939, 940, 941, /**/ 942, 943, 944, /**/ 945, 946, 947, /**/ 948, 949, 950, /**/ 951, 952, 953, /**/ 954, 955, 956, /**/ 957, 958, 959,
    });

    ShapeData Spheres::mData = {};

    int Spheres::getVertexCount() const
    {
        return (int)kSphereVertices.size();
    }

    int Spheres::getIndexCount() const
    {
        return (int)kSphereIndices.size();
    }

    Vao::SharedPtr Spheres::getVao()
    {
        if (mData.vertexBuffer == nullptr)
        {
            HimeBufferHelpers::createAndCopyBuffer(mData.vertexBuffer, sizeof(float3), (uint)kSphereVertices.size(), kSphereVertices.data(), "SphereVertexBuffer");
            HimeBufferHelpers::createAndCopyBuffer(mData.indexBuffer, sizeof(int), (uint)kSphereIndices.size(), kSphereIndices.data(), "SphereIndexBuffer");
            mData.vao = createVao(Vao::Topology::TriangleList, mData.vertexBuffer, mData.indexBuffer, ResourceFormat::R32Uint);
        }
        return mData.vao;
    }

    void Spheres::addInstance(const float3& center, const float radius)
    {
        const float3 scale(radius);
        const float3& translate = center;

        float4x4 transform = glm::scale(glm::translate(glm::mat4(), translate), scale);
        mTransformMatrixes.emplace_back(transform);
    }
}
